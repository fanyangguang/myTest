<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fan.dao.trade.RelativeRepository">
  <resultMap id="BaseResultMap" type="com.fan.common.domain.Relative">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="accountId" jdbcType="BIGINT" property="accountId" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="relationship" jdbcType="VARCHAR" property="relationship" />
    <result column="firstName" jdbcType="VARCHAR" property="firstName" />
    <result column="middleName" jdbcType="VARCHAR" property="middleName" />
    <result column="lastName" jdbcType="VARCHAR" property="lastName" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="districtAddress" jdbcType="VARCHAR" property="districtAddress" />
    <result column="districtAddressCode" jdbcType="VARCHAR" property="districtAddressCode" />
    <result column="streetAddress" jdbcType="VARCHAR" property="streetAddress" />
    <result column="company" jdbcType="VARCHAR" property="company" />
    <result column="genderCode" jdbcType="VARCHAR" property="genderCode" />
    <result column="relationshipCode" jdbcType="VARCHAR" property="relationshipCode" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, createdAt, updatedAt, accountId, type, relationship, firstName, middleName, lastName,
    gender, mobile, birthday, email, districtAddress, streetAddress, company,districtAddressCode,genderCode,relationshipCode, name
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from Relatives
    where accountId = #{accountId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from Relatives
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="com.fan.common.domain.Relative">
    insert into Relatives (id, createdAt, updatedAt,
      accountId, type, relationship,
      firstName, middleName, lastName,
      gender, mobile, birthday,
      email, districtAddress, streetAddress,
      company,districtAddressCode,genderCode,relationshipCode, name)
    values (#{id,jdbcType=BIGINT}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP},
      #{accountId,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{relationship,jdbcType=VARCHAR},
      #{firstName,jdbcType=VARCHAR}, #{middleName,jdbcType=VARCHAR}, #{lastName,jdbcType=VARCHAR},
      #{gender,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE},
      #{email,jdbcType=VARCHAR}, #{districtAddress,jdbcType=VARCHAR}, #{streetAddress,jdbcType=VARCHAR},
      #{company,jdbcType=VARCHAR},#{districtAddressCode,jdbcType=VARCHAR},#{genderCode,jdbcType=VARCHAR},#{relationshipCode,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.fan.common.domain.Relative" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    insert ignore into Relatives
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createdAt != null">
        createdAt,
      </if>
      <if test="updatedAt != null">
        updatedAt,
      </if>
      <if test="accountId != null">
        accountId,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="relationship != null">
        relationship,
      </if>
      <if test="firstName != null">
        firstName,
      </if>
      <if test="middleName != null">
        middleName,
      </if>
      <if test="lastName != null">
        lastName,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="districtAddress != null">
        districtAddress,
      </if>
      <if test="districtAddressCode != null">
        districtAddressCode,
      </if>
      <if test="streetAddress != null">
        streetAddress,
      </if>
      <if test="company != null">
        company,
      </if>
      <if test="genderCode != null">
        genderCode,
      </if>
      <if test="relationshipCode != null">
        relationshipCode,
      </if>
      <if test="name != null">
        name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="relationship != null">
        #{relationship,jdbcType=VARCHAR},
      </if>
      <if test="firstName != null">
        #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="middleName != null">
        #{middleName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null">
        #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="districtAddress != null">
        #{districtAddress,jdbcType=VARCHAR},
      </if>
      <if test="districtAddressCode != null">
        #{districtAddressCode,jdbcType=VARCHAR},
      </if>
      <if test="streetAddress != null">
        #{streetAddress,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        #{company,jdbcType=VARCHAR},
      </if>
      <if test="genderCode != null">
        #{genderCode,jdbcType=VARCHAR},
      </if>
      <if test="relationshipCode != null">
        #{relationshipCode,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByExampleSelective" parameterType="map">
    update Relatives
    <set>
      <if test="record.createdAt != null">
        createdAt = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountId != null">
        accountId = #{record.accountId,jdbcType=BIGINT},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.relationship != null">
        relationship = #{record.relationship,jdbcType=VARCHAR},
      </if>
      <if test="record.firstName != null">
        firstName = #{record.firstName,jdbcType=VARCHAR},
      </if>
      <if test="record.middleName != null">
        middleName = #{record.middleName,jdbcType=VARCHAR},
      </if>
      <if test="record.lastName != null">
        lastName = #{record.lastName,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=VARCHAR},
      </if>
      <if test="record.mobile != null">
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=DATE},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.districtAddress != null">
        districtAddress = #{record.districtAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.districtAddressCode != null">
        districtAddressCode = #{record.districtAddressCode,jdbcType=VARCHAR},
      </if>
      <if test="record.streetAddress != null">
        streetAddress = #{record.streetAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.company != null">
        company = #{record.company,jdbcType=VARCHAR},
      </if>
      <if test="record.genderCode != null">
        genderCode = #{record.genderCode,jdbcType=VARCHAR},
      </if>
      <if test="record.relationshipCode != null">
        relationshipCode = #{record.relationshipCode,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="com.fan.common.domain.Relative">
    update Relatives
    <set>
      <if test="createdAt != null">
        createdAt = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updatedAt = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="accountId != null">
        accountId = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="relationship != null">
        relationship = #{relationship,jdbcType=VARCHAR},
      </if>
      <if test="firstName != null">
        firstName = #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="middleName != null">
        middleName = #{middleName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null">
        lastName = #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="districtAddress != null">
        districtAddress = #{districtAddress,jdbcType=VARCHAR},
      </if>
      <if test="districtAddressCode != null">
        districtAddressCode = #{districtAddressCode,jdbcType=VARCHAR},
      </if>
      <if test="streetAddress != null">
        streetAddress = #{streetAddress,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        company = #{company,jdbcType=VARCHAR},
      </if>
      <if test="genderCode != null">
        genderCode = #{genderCode,jdbcType=VARCHAR},
      </if>
      <if test="relationshipCode != null">
        relationshipCode = #{relationshipCode,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>


  <insert id="insertRelativeList" parameterType="java.util.List">

    insert into Relatives (createdAt, updatedAt,
    accountId, type, relationship,
    firstName, middleName, lastName,
    gender, mobile, birthday,
    email, districtAddress, streetAddress,
    company,districtAddressCode,genderCode,relationshipCode, name)
    values
    <foreach collection="list" item="item" separator=",">
      ( #{item.createdAt,jdbcType=TIMESTAMP}, #{item.updatedAt,jdbcType=TIMESTAMP},
      #{item.accountId,jdbcType=BIGINT}, #{item.type,jdbcType=VARCHAR}, #{item.relationship,jdbcType=VARCHAR},
      #{item.firstName,jdbcType=VARCHAR}, #{item.middleName,jdbcType=VARCHAR}, #{item.lastName,jdbcType=VARCHAR},
      #{item.gender,jdbcType=VARCHAR}, #{item.mobile,jdbcType=VARCHAR}, #{item.birthday,jdbcType=DATE},
      #{item.email,jdbcType=VARCHAR}, #{item.districtAddress,jdbcType=VARCHAR}, #{item.streetAddress,jdbcType=VARCHAR},
      #{item.company,jdbcType=VARCHAR},#{item.districtAddressCode,jdbcType=VARCHAR},#{item.genderCode,jdbcType=VARCHAR},
      #{item.relationshipCode,jdbcType=VARCHAR},#{item.name,jdbcType=VARCHAR})
    </foreach>
  </insert>

</mapper>